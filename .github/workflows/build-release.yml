name: Build Windows Release

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller==6.14.2

    - name: List project structure
      run: |
        Write-Host "=== Projekt-Struktur ==="
        Get-ChildItem -Recurse -Name | Select-Object -First 50
        Write-Host "=== Python-Dateien ==="
        Get-ChildItem -Name "*.py"
        
    - name: Verify main application file
      run: |
        if (Test-Path start_hochzeitsplaner.py) {
          Write-Host "✅ start_hochzeitsplaner.py gefunden"
        } else {
          Write-Host "❌ start_hochzeitsplaner.py nicht gefunden"
          exit 1
        }
    
    - name: Create PyInstaller spec file
      run: |
        @"
        # -*- mode: python ; coding: utf-8 -*-
        
        block_cipher = None
        
        a = Analysis(
            ['start_hochzeitsplaner.py'],
            pathex=[],
            binaries=[],
            datas=[
                ('templates', 'templates'),
                ('static', 'static'),
                ('auth_config.json', '.'),
                ('dyndns_config.json', '.'),
                ('google_maps_config.json', '.'),
                ('hochzeitsplaner_config.json', '.'),
                ('launcher_config.json', '.'),
                ('requirements.txt', '.'),
            ],
            hiddenimports=[
                'flask',
                'flask_cors',
                'sqlite3',
                'json',
                'datetime',
                'os',
                'sys',
                'logging',
                'functools',
                'werkzeug',
                'jinja2',
                'markupsafe',
                'itsdangerous',
                'click',
                'blinker',
                'email_manager',
                'sqlite_datenmanager',
                'dyndns_manager',
                'config_manager',
            ],
            hookspath=[],
            hooksconfig={},
            runtime_hooks=[],
            excludes=[],
            win_no_prefer_redirects=False,
            win_private_assemblies=False,
            cipher=block_cipher,
            noarchive=False,
        )
        
        pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)
        
        exe = EXE(
            pyz,
            a.scripts,
            a.binaries,
            a.zipfiles,
            a.datas,
            [],
            name='hochzeitsplaner',
            debug=False,
            bootloader_ignore_signals=False,
            strip=False,
            upx=True,
            upx_exclude=[],
            runtime_tmpdir=None,
            console=True,
            disable_windowed_traceback=False,
            argv_emulation=False,
            target_arch=None,
            codesign_identity=None,
            entitlements_file=None,
            icon=None,
        )
        "@ | Out-File -FilePath "hochzeitsplaner.spec" -Encoding UTF8

    - name: Build with PyInstaller
      run: |
        Write-Host "=== Starte PyInstaller Build ==="
        pyinstaller hochzeitsplaner.spec --clean --noconfirm
        
    - name: Check build output
      run: |
        Write-Host "=== Build-Verzeichnis ==="
        if (Test-Path "dist") {
          Get-ChildItem "dist" -Recurse | Format-Table Name, Length, LastWriteTime
        } else {
          Write-Host "❌ dist Verzeichnis nicht gefunden"
        }
        
        Write-Host "=== Executable Check ==="
        if (Test-Path "dist/hochzeitsplaner.exe") {
          Write-Host "✅ hochzeitsplaner.exe erfolgreich erstellt"
          $fileInfo = Get-ItemProperty "dist/hochzeitsplaner.exe"
          Write-Host "Dateigröße: $($fileInfo.Length / 1MB) MB"
        } else {
          Write-Host "❌ hochzeitsplaner.exe nicht gefunden"
          exit 1
        }

    - name: Test executable (basic)
      run: |
        Write-Host "=== Teste Executable ==="
        try {
          $process = Start-Process -FilePath "dist/hochzeitsplaner.exe" -ArgumentList "--help" -Wait -PassThru -NoNewWindow -RedirectStandardError "error.log" -RedirectStandardOutput "output.log"
          Write-Host "Exit Code: $($process.ExitCode)"
          if (Test-Path "output.log") {
            Write-Host "=== Standard Output ==="
            Get-Content "output.log" | Write-Host
          }
          if (Test-Path "error.log") {
            Write-Host "=== Error Output ==="
            Get-Content "error.log" | Write-Host
          }
        } catch {
          Write-Host "Warnung: Executable-Test fehlgeschlagen - $($_.Exception.Message)"
        }

    - name: Create distribution package
      run: |
        Write-Host "=== Erstelle Distributions-Paket ==="
        New-Item -ItemType Directory -Path "package" -Force
        Copy-Item "dist/hochzeitsplaner.exe" "package/"
        
        # Kopiere Konfigurationsdateien falls vorhanden
        $configFiles = @("auth_config.json", "dyndns_config.json", "google_maps_config.json", "hochzeitsplaner_config.json", "launcher_config.json")
        foreach ($file in $configFiles) {
          if (Test-Path $file) {
            Copy-Item $file "package/" -ErrorAction SilentlyContinue
            Write-Host "📄 $file kopiert"
          }
        }
        
        # WICHTIG: Datenbank wird NICHT kopiert - wird separat übertragen
        Write-Host "ℹ️  Datenbank-Dateien werden separat übertragen"
        
        # Erstelle README für das Package
        @"
        # Hochzeitsplaner - Windows Release
        
        ## Installation
        1. Entpacken Sie das ZIP-Archiv
        2. Stellen Sie sicher, dass das data/ Verzeichnis mit der Datenbank vorhanden ist
        3. Starten Sie hochzeitsplaner.exe
        4. Beim ersten Start wird eine interaktive Konfiguration durchgeführt
        
        ## Verwendung
        - HTTP: http://localhost:8080
        - Die Anwendung läuft auf Port 8080 mit IPv4/IPv6 Support
        - Zum Beenden: Strg+C im Terminal
        
        ## Datenverzeichnis
        WICHTIG: Die Datenbank ist NICHT in der .exe enthalten!
        - Übertragen Sie das data/ Verzeichnis separat
        - Oder konfigurieren Sie beim ersten Start ein neues Datenverzeichnis
        
        ## Verzeichnisstruktur
        hochzeitsplaner/
        ├── hochzeitsplaner.exe    # Hauptanwendung
        └── data/                  # Datenverzeichnis (separat übertragen)
            ├── hochzeit.db        # SQLite-Datenbank
            ├── hochzeit_config.json
            └── settings.json
        
        Entwickelt für Hochzeitsplanung und Gästemanagement.
        "@ | Out-File -FilePath "package/README.txt" -Encoding utf8
        
        Write-Host "=== Paket-Inhalt ==="
        Get-ChildItem -Path package -Recurse
        
        Write-Host "=== Erstelle ZIP-Archiv ==="
        Compress-Archive -Path "package/*" -DestinationPath "hochzeitsplaner-windows.zip" -Force
        Get-ChildItem "hochzeitsplaner-windows.zip" | Format-List

    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: hochzeitsplaner-windows
        path: hochzeitsplaner-windows.zip
        retention-days: 30

  create-release:
    needs: [build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Download Windows artifact
      uses: actions/download-artifact@v4
      with:
        name: hochzeitsplaner-windows
        
    - name: Get release version
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        release_name: Hochzeitsplaner ${{ steps.get_version.outputs.VERSION }}
        body: |
          ## 🎉 Hochzeitsplaner Release ${{ steps.get_version.outputs.VERSION }}
          
          ### ✨ Features
          - 🎪 Interaktive Datenbank-Pfad-Konfiguration beim ersten Start
          - 🌐 IPv4/IPv6 Dual-Stack Support auf Port 8080
          - 📱 Optimierte Benutzeroberfläche mit kompaktem Layout
          - 🗃️ SQLite-Datenbank für lokale Datenspeicherung
          - 🎯 Gästemanagement und RSVP-System
          - 📧 E-Mail-Integration für Benachrichtigungen
          - 🗺️ Google Maps Integration für Standorte
          - 💰 Budget- und Kostenverwaltung
          - 📋 Aufgabenplaner für Hochzeitsvorbereitungen
          
          ### 🚀 Installation
          1. `hochzeitsplaner-windows.zip` herunterladen
          2. ZIP-Archiv entpacken
          3. **WICHTIG**: Datenbank separat übertragen oder neue erstellen
          4. `hochzeitsplaner.exe` starten
          5. Beim ersten Start: Datenverzeichnis konfigurieren
          6. Browser öffnen: http://localhost:8080
          
          ### 📁 Datenbank-Hinweis
          **ACHTUNG**: Die Datenbank ist NICHT in der .exe enthalten!
          - Übertragen Sie Ihr bestehendes `data/` Verzeichnis separat
          - Oder lassen Sie die Anwendung eine neue Datenbank erstellen
          - Die interaktive Konfiguration hilft beim Setup
          
          ### 🔧 Systemanforderungen
          - Windows 10/11 (x64)
          - Keine zusätzliche Software erforderlich
          - Internetverbindung für E-Mail und Maps (optional)
          
          ### 🆕 Neue Features in dieser Version
          - Interaktive Erstkonfiguration für Datenbankpfad
          - Benutzerfreundliches Startup-Script  
          - Aufgeräumte Codebase ohne Debug-Logs
          - Optimierte UI-Layouts
          - Separate Datenbank-Übertragung für bessere Flexibilität
          
          **Hinweis**: Alle Daten werden lokal gespeichert. Keine Cloud-Abhängigkeiten.
        draft: false
        prerelease: false
    
    - name: Upload Windows Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./hochzeitsplaner-windows.zip
        asset_name: hochzeitsplaner-windows-${{ steps.get_version.outputs.VERSION }}.zip
        asset_content_type: application/zip
