name: Build Windows .exe

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller==6.14.2

    - name: List files for debugging
      run: |
        Write-Host "=== Arbeitsverzeichnis ==="
        Get-Location
        Write-Host "=== Alle Python-Dateien ==="
        Get-ChildItem -Name "*.py"
        Write-Host "=== Alle Dateien ==="
        Get-ChildItem -Name
        
    - name: Verify launcher file
      run: |
        if (Test-Path launcher.py) {
          Write-Host "✅ launcher.py gefunden"
        } else {
          Write-Host "❌ launcher.py nicht gefunden"
          Get-ChildItem -Name "*.py" | Write-Host
          exit 1
        }
    
    - name: Check SSL certificates
      shell: cmd
      run: |
        if exist "ssl_certificate.crt" (
          echo SSL-Zertifikat gefunden: ssl_certificate.crt
        ) else (
          echo SSL-Zertifikat nicht gefunden, erstelle Dummy-Datei
          echo # Dummy SSL Certificate > ssl_certificate.crt
        )
        if exist "ssl_private_key.key" (
          echo SSL-Schlüssel gefunden: ssl_private_key.key
        ) else (
          echo SSL-Schlüssel nicht gefunden, erstelle Dummy-Datei
          echo # Dummy SSL Key > ssl_private_key.key
        )
    
    - name: Check optional files
      shell: cmd
      run: |
        if exist "dyndns_config.json" (
          echo DynDNS Config gefunden
        ) else (
          echo {} > dyndns_config.json
        )
        if exist "auth_config.json" (
          echo Auth Config gefunden
        ) else (
          echo {} > auth_config.json
        )
    
    - name: Build executable
      run: |
        pyinstaller --onefile --console --name Hochzeitsplaner launcher.py --add-data "data;data" --add-data "static;static" --add-data "templates;templates" --add-data "auth_config.json;." --add-data "gunicorn.conf.py;." --add-data "dyndns_config.json;." --add-data "dyndns_manager.py;." --add-data "email_manager.py;." --add-data "universal_launcher.py;." --add-data "production_launcher.py;." --add-data "safe_launcher_ssl.py;." --add-data "launcher_config.json;." --add-data "requirements.txt;." --add-data "ssl_certificate.crt;." --add-data "ssl_private_key.key;." --hidden-import flask --hidden-import flask_cors --hidden-import pandas --hidden-import openpyxl --hidden-import requests --hidden-import gunicorn --hidden-import gevent --hidden-import datenmanager --hidden-import dyndns_manager --hidden-import email_manager --hidden-import smtplib --hidden-import email --hidden-import imaplib --hidden-import threading --hidden-import idna
    
    - name: Create distribution
      shell: cmd
      run: |
        if not exist Distribution mkdir Distribution
        copy "dist\Hochzeitsplaner.exe" "Distribution\"
        copy "launcher_config.json" "Distribution\"
        echo # Hochzeitsplaner Windows .exe - Produktivversion 2.0 > "Distribution\README.txt"
        echo. >> "Distribution\README.txt"
        echo NEUE FEATURES: >> "Distribution\README.txt"
        echo - Vollstaendige E-Mail Integration mit SMTP/IMAP >> "Distribution\README.txt"
        echo - Aufgaben-E-Mail-Verwaltung und automatische Zuordnung >> "Distribution\README.txt"
        echo - Professionelle E-Mail-Signaturen >> "Distribution\README.txt"
        echo - DNS-Rebinding-Schutz Erkennung fuer lokale Domains >> "Distribution\README.txt"
        echo - Punycode-Domain-Support (Unicode + ASCII) >> "Distribution\README.txt"
        echo - Automatischer Gunicorn Produktivserver >> "Distribution\README.txt"
        echo - Dual-Stack IPv4+IPv6 Support >> "Distribution\README.txt"
        echo - SSL/HTTPS Support mit Zertifikaten >> "Distribution\README.txt"
        echo - Optimierte Performance >> "Distribution\README.txt"
        echo. >> "Distribution\README.txt"
        echo KONFIGURATION: >> "Distribution\README.txt"
        echo - launcher_config.json fuer Server-Einstellungen >> "Distribution\README.txt"
        echo - auth_config.json fuer E-Mail-Konfiguration >> "Distribution\README.txt"
        echo - E-Mail SMTP/IMAP Einstellungen in der Anwendung >> "Distribution\README.txt"
        echo. >> "Distribution\README.txt"
        echo VERWENDUNG: >> "Distribution\README.txt"
        echo Doppelklick auf Hochzeitsplaner.exe zum Starten >> "Distribution\README.txt"
        echo Browser oeffnet sich automatisch auf https://localhost:8443 >> "Distribution\README.txt"
        echo. >> "Distribution\README.txt"
        echo STANDARD-LOGIN: >> "Distribution\README.txt"
        echo Benutzername: admin >> "Distribution\README.txt"
        echo Passwort: hochzeit2025 >> "Distribution\README.txt"
        echo. >> "Distribution\README.txt"
        echo PRODUKTIVSERVER: >> "Distribution\README.txt"
        echo - Gunicorn wird automatisch erkannt und verwendet >> "Distribution\README.txt"
        echo - Fallback auf Flask bei fehlendem Gunicorn >> "Distribution\README.txt"
        echo - SSL-Zertifikate werden automatisch erkannt >> "Distribution\README.txt"
        echo - DynDNS Manager fuer Domain-Updates integriert >> "Distribution\README.txt"
    
    - name: Upload Windows executable
      uses: actions/upload-artifact@v4
      with:
        name: hochzeitsplaner-windows
        path: Distribution/
        retention-days: 90
