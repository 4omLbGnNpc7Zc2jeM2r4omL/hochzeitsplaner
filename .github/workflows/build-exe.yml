name: Build Windows .exe

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install core dependencies
      run: |
        python -m pip install --upgrade pip
        pip install Flask==3.0.0 Flask-CORS==4.0.0 pandas==2.1.4 openpyxl==3.1.2 pyinstaller
        
    - name: Copy SSL certificate files and prepare launcher
      run: |
        # Kopiere SSL-Dateien (falls vorhanden - andernfalls wird ohne SSL gebaut)
        if (Test-Path "ssl_private_key.key") { Copy-Item "ssl_private_key.key" "." }
        if (Test-Path "ssl_certificate.crt") { Copy-Item "ssl_certificate.crt" "." }
        
        # Verwende den SSL-fÃ¤higen Launcher
        Copy-Item "working_launcher_ssl.py" "launcher.py"
    
    - name: Build executable
      run: |
        pyinstaller --onefile --console --name Hochzeitsplaner launcher.py --add-data "data;data" --add-data "static;static" --add-data "templates;templates" --add-data "ssl_private_key.key;." --hidden-import flask --hidden-import flask_cors --hidden-import pandas --hidden-import openpyxl
    
    - name: Create distribution
      shell: cmd
      run: |
        if not exist Distribution mkdir Distribution
        copy "dist\Hochzeitsplaner.exe" "Distribution\"
        echo # Hochzeitsplaner > "Distribution\README.txt"
        echo Doppelklick auf Hochzeitsplaner.exe >> "Distribution\README.txt"
        echo Login: admin / hochzeit2025 >> "Distribution\README.txt"
    
    - name: Upload Windows executable
      uses: actions/upload-artifact@v4
      with:
        name: Hochzeitsplaner-Windows
        path: Distribution/
        retention-days: 30
