#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Hochzeitsplaner Web-Anwendung - Standalone Version
"""

import sys
import os
from flask import Flask, render_template, request, jsonify, send_file
from flask_cors import CORS
import json
import tempfile
from datetime import datetime
import pandas as pd

# Aktueller Pfad f√ºr Import
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.append(current_dir)

try:
    from datenmanager import HochzeitsDatenManager
except ImportError as e:
    print(f"‚ùå Fehler beim Importieren des DataManagers: {e}")
    sys.exit(1)

# Flask App initialisieren
app = Flask(__name__)
app.config['SECRET_KEY'] = 'hochzeitsplaner-standalone-2025'
CORS(app)

# Globaler DataManager
data_manager = None

def clean_json_data(data):
    """Bereinigt Daten f√ºr JSON-Serialisierung"""
    if isinstance(data, dict):
        return {key: clean_json_data(value) for key, value in data.items()}
    elif isinstance(data, list):
        return [clean_json_data(item) for item in data]
    elif pd.isna(data) or (isinstance(data, float) and str(data) == 'nan'):
        return ''
    elif isinstance(data, (int, float, str, bool)):
        return data
    else:
        return str(data)

def init_data_manager():
    """Initialisiert den DataManager"""
    global data_manager
    try:
        data_dir = os.path.join(current_dir, "data")
        data_manager = HochzeitsDatenManager(data_dir)
        print(f"‚úÖ DataManager initialisiert: {data_dir}")
        return True
    except Exception as e:
        print(f"‚ùå Fehler beim Initialisieren: {e}")
        return False

# Routen
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/gaesteliste')
def gaesteliste():
    return render_template('gaesteliste.html')

@app.route('/budget')
def budget():
    return render_template('budget.html')

@app.route('/einstellungen')
def einstellungen():
    return render_template('einstellungen.html')

# API Endpunkte
@app.route('/api/dashboard/stats')
def api_dashboard_stats():
    try:
        if not data_manager:
            return jsonify({'error': 'DataManager nicht initialisiert'}), 500
        
        gaeste_stats = data_manager.get_guest_statistics()
        budget_stats = data_manager.get_budget_summary()
        settings = data_manager.load_settings()
        
        # Daten bereinigen
        response_data = {
            'success': True,
            'gaeste': clean_json_data(gaeste_stats),
            'budget': clean_json_data(budget_stats),
            'settings': clean_json_data(settings)
        }
        
        return jsonify(response_data)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/gaeste/list')
def api_gaeste_list():
    try:
        if not data_manager:
            return jsonify({'error': 'DataManager nicht initialisiert'}), 500
        
        # DataFrame zu Records konvertieren und NaN-Werte behandeln
        gaeste_df = data_manager.gaesteliste_df.fillna('')
        gaeste_list = gaeste_df.to_dict('records')
        
        # Daten f√ºr JSON bereinigen
        cleaned_gaeste = clean_json_data(gaeste_list)
        
        return jsonify({
            'success': True,
            'gaeste': cleaned_gaeste,
            'count': len(cleaned_gaeste)
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/gaeste/add', methods=['POST'])
def api_gaeste_add():
    try:
        if not data_manager:
            return jsonify({'error': 'DataManager nicht initialisiert'}), 500
        
        gast_data = request.json
        required_fields = ['Name', 'Vorname', 'Status']
        
        for field in required_fields:
            if field not in gast_data or not gast_data[field].strip():
                return jsonify({'error': f'Feld "{field}" ist erforderlich'}), 400
        
        # Standardwerte setzen - nur Ja/Nein, kein "Vielleicht"
        defaults = {
            'Email': '', 'Telefon': '', 'Adresse': '',
            'Teilnahme_Standesamt': 'Nein',
            'Teilnahme_Essen': 'Nein',
            'Teilnahme_Party': 'Nein',
            'Bemerkungen': ''
        }
        
        for key, default in defaults.items():
            if key not in gast_data:
                gast_data[key] = default
        
        success = data_manager.add_guest(gast_data)
        
        if success:
            return jsonify({'success': True, 'message': 'Gast erfolgreich hinzugef√ºgt'})
        else:
            return jsonify({'error': 'Fehler beim Hinzuf√ºgen'}), 500
            
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/gaeste/update/<int:index>', methods=['PUT'])
def api_gaeste_update(index):
    try:
        if not data_manager:
            return jsonify({'error': 'DataManager nicht initialisiert'}), 500
        
        gast_data = request.json
        
        # Pr√ºfe ob Index g√ºltig ist
        if index >= len(data_manager.gaesteliste_df):
            return jsonify({'error': 'Ung√ºltiger Gast-Index'}), 400
        
        # Aktualisiere die Daten im DataFrame
        for key, value in gast_data.items():
            if key in data_manager.gaesteliste_df.columns:
                data_manager.gaesteliste_df.loc[index, key] = value
        
        # Speichere die √Ñnderungen
        success = data_manager.save_gaesteliste()
        
        if success:
            return jsonify({'success': True, 'message': 'Gast aktualisiert'})
        else:
            return jsonify({'error': 'Fehler beim Speichern'}), 500
            
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/gaeste/delete/<int:index>', methods=['DELETE'])
def api_gaeste_delete(index):
    try:
        if not data_manager:
            return jsonify({'error': 'DataManager nicht initialisiert'}), 500
        
        # Pr√ºfe ob Index g√ºltig ist
        if index >= len(data_manager.gaesteliste_df):
            return jsonify({'error': 'Ung√ºltiger Gast-Index'}), 400
        
        # L√∂sche den Gast
        data_manager.gaesteliste_df = data_manager.gaesteliste_df.drop(index).reset_index(drop=True)
        
        # Speichere die √Ñnderungen
        success = data_manager.save_gaesteliste()
        
        if success:
            return jsonify({'success': True, 'message': 'Gast gel√∂scht'})
        else:
            return jsonify({'error': 'Fehler beim Speichern'}), 500
            
    except Exception as e:
        return jsonify({'error': str(e)}), 500

            return jsonify({'error': 'DataManager nicht initialisiert'}), 500
        
        settings = data_manager.load_settings()
        cleaned_settings = clean_json_data(settings)
        
        return jsonify({'success': True, 'settings': cleaned_settings})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/settings/save', methods=['POST'])
def api_settings_save():
    try:
        if not data_manager:
            return jsonify({'error': 'DataManager nicht initialisiert'}), 500
        
        settings = request.json
        for key, value in settings.items():
            data_manager.set_setting(key, value)
        
        return jsonify({'success': True, 'message': 'Einstellungen gespeichert'})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/export/excel')
def api_export_excel():
    try:
        if not data_manager:
            return jsonify({'error': 'DataManager nicht initialisiert'}), 500
        
        with tempfile.NamedTemporaryFile(suffix='.xlsx', delete=False) as temp_file:
            temp_path = temp_file.name
        
        success = data_manager.export_to_excel(temp_path)
        
        if success and os.path.exists(temp_path):
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            return send_file(
                temp_path,
                as_attachment=True,
                download_name=f'Hochzeitsplaner_{timestamp}.xlsx',
                mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            )
        else:
            return jsonify({'error': 'Excel-Export fehlgeschlagen'}), 500
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    print("üéâ Hochzeitsplaner Web-Anwendung")
    print("=" * 50)
    
    if not init_data_manager():
        print("‚ùå DataManager-Initialisierung fehlgeschlagen")
        sys.exit(1)
    
    print("‚úÖ DataManager initialisiert")
    print("üåê URL: http://localhost:8081")
    print("‚ö†Ô∏è  Zum Beenden: Strg+C")
    print("=" * 50)
    
    try:
        app.run(host='0.0.0.0', port=8081, debug=False, threaded=True)
    except KeyboardInterrupt:
        print("\nüëã Web-Anwendung beendet")
    except Exception as e:
        print(f"\n‚ùå Fehler: {e}")
        sys.exit(1)

# Budget API Endpoints
@app.route('/api/budget/list')
def api_budget_list():
    """Budget-Liste abrufen"""
    try:
        budget = data_manager.lade_budget()
        return jsonify({
            'success': True,
            'budget': clean_json_data(budget.to_dict('records'))
        })
    except Exception as e:
        logger.error(f"Fehler beim Laden des Budgets: {str(e)}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/budget/auto-generate', methods=['POST'])
def api_budget_auto_generate():
    """Budget automatisch erstellen"""
    try:
        data_manager.budget_automatisch_erstellen()
        return jsonify({'success': True, 'message': 'Budget automatisch erstellt'})
    except Exception as e:
        logger.error(f"Fehler beim automatischen Erstellen des Budgets: {str(e)}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/budget/add', methods=['POST'])
def api_budget_add():
    """Budget-Position hinzuf√ºgen"""
    try:
        budget_data = request.get_json()
        if not budget_data or not budget_data.get('Position'):
            return jsonify({'success': False, 'error': 'Position ist erforderlich'}), 400
        
        # Position zu Budget hinzuf√ºgen
        data_manager.budget_position_hinzufuegen(
            kategorie=budget_data.get('Kategorie', 'Sonstige'),
            position=budget_data['Position'],
            geplante_kosten=float(budget_data.get('Geplante_Kosten', 0)),
            tatsaechliche_kosten=float(budget_data.get('Tatsaechliche_Kosten', 0))
        )
        
        return jsonify({'success': True, 'message': 'Budget-Position hinzugef√ºgt'})
    except Exception as e:
        logger.error(f"Fehler beim Hinzuf√ºgen der Budget-Position: {str(e)}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/budget/update/<int:index>', methods=['PUT'])
def api_budget_update(index):
    """Budget-Position aktualisieren"""
    try:
        budget_data = request.get_json()
        if not budget_data or not budget_data.get('Position'):
            return jsonify({'success': False, 'error': 'Position ist erforderlich'}), 400
        
        # Position aktualisieren
        data_manager.budget_position_aktualisieren(
            index=index,
            kategorie=budget_data.get('Kategorie', 'Sonstige'),
            position=budget_data['Position'],
            geplante_kosten=float(budget_data.get('Geplante_Kosten', 0)),
            tatsaechliche_kosten=float(budget_data.get('Tatsaechliche_Kosten', 0))
        )
        
        return jsonify({'success': True, 'message': 'Budget-Position aktualisiert'})
    except Exception as e:
        logger.error(f"Fehler beim Aktualisieren der Budget-Position: {str(e)}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/budget/delete/<int:index>', methods=['DELETE'])
def api_budget_delete(index):
    """Budget-Position l√∂schen"""
    try:
        data_manager.budget_position_loeschen(index)
        return jsonify({'success': True, 'message': 'Budget-Position gel√∂scht'})
    except Exception as e:
        logger.error(f"Fehler beim L√∂schen der Budget-Position: {str(e)}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/budget/summary')
def api_budget_summary():
    """Budget-Zusammenfassung abrufen"""
    try:
        summary = data_manager.get_budget_summary()
        return jsonify({
            'success': True,
            'summary': clean_json_data(summary)
        })
    except Exception as e:
        logger.error(f"Fehler beim Laden der Budget-Zusammenfassung: {str(e)}")
        return jsonify({'success': False, 'error': str(e)}), 500


# Masseneditierung f√ºr G√§ste
@app.route('/api/gaeste/mass-update', methods=['PUT'])
def api_gaeste_mass_update():
    """Mehrere G√§ste gleichzeitig bearbeiten"""
    try:
        request_data = request.get_json()
        indices = request_data.get('indices', [])
        updates = request_data.get('updates', {})
        
        if not indices or not updates:
            return jsonify({'success': False, 'error': 'Indices und Updates sind erforderlich'}), 400
        
        # G√§steliste laden
        data_manager.load_gaesteliste()
        
        # Updates anwenden
        for index in indices:
            if 0 <= index < len(data_manager.gaesteliste_df):
                for key, value in updates.items():
                    if key in ['Standesamt', 'Essen', 'Party']:
                        data_manager.gaesteliste_df.iloc[index, data_manager.gaesteliste_df.columns.get_loc(key)] = value
        
        # Speichern
        data_manager.save_gaesteliste()
        
        return jsonify({'success': True, 'message': f'{len(indices)} G√§ste aktualisiert'})
    except Exception as e:
        logger.error(f"Fehler bei der Masseneditierung: {str(e)}")
        return jsonify({'success': False, 'error': str(e)}), 500

